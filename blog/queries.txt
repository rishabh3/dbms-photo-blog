Simple => no joins, no nesting :

select first_name, dob
from blog_userprofile
where gender = 'F';

*select name
from blog_genre;

*select caption
from blog_photo
where file_type = 'JPEG';

*select name, price
from blog_plan;

*select name, price
from Workshop;

*select name, number_of_views
from Video_tutorials
where number_of_views > 5;

*select name, organisation
from Workshop
where price < 200;

Category II => cross joins, nesting :

*select name, requirement, price
from Workshop W, Workshop_Requirements R
where W.w_id = R.w_id;

*select features, G.name
from Photo P, Genre G, Camera C, CameraFeatures F
where C.name = 'DSLR' and c_id = F.camera_id and c_id = P.camera_id and P.gen_id = G.gen_id;

*(select name, features, price
from Plan P, PlanFeatures F
where P.plan_id = F.plan_id and P.duration = '30')
intersect
(select name, features, price
from Plan P, PlanFeatures F
where P.plan_id = F.plan_id and P.price < 250);

*select U.first_name, P.name
from Subscribes_to, UserProfile U, Plan P;

*select photo_id, location, rank
from Photo P, Genre G
order by rank
where P.gen_id = G.gen_id and rank > 4;

*select first_name, email_id, number_of_downloads
from UserProfile U, Photo P, Review R
where number_of_downloads > 10 and u_id = user_id ;

*select distinct first_name, name
from UserProfile, Genre, Interested_in
order by first_name
where genre_id = gen_id and u_id = user_id;

Category III => EVERYTHING!!!

*select photo_id, first_name, article, max(number_of_likes)
from Photo P,UserProfile, Review, Review_About R, Article A
where review_id = rev_id and P.user_id = u_id and R.photo_id = P.photo_id and A.photo_id = R.photo_id;
